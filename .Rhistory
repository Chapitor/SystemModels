k3 = k3,
tau3 = tau3,
tau2 = tau2,
vars = vars
)
data$predicted <-
perf_model(
data = data,
P0 = P0,
k1 = k1,
k3 = k3,
tau1 = tau1,
tau2 = tau2,
tau3 = tau3,
vars = vars,
target = target
)
# Compute RMSE, MAE and Rsquared on test data
rmse_vec <-
caret::RMSE(pred = data[which(data[, target] != 0), "predicted"],
obs = data[which(data[, target] != 0), "perf"])
MAE_vec <-
caret::MAE(pred = data[which(data[, target] != 0), "predicted"],
obs = data[which(data[, target] != 0), "perf"])
Rsq_vec <-
caret::R2(pred = data[which(data[, target] != 0), "predicted"],
obs = data[which(data[, target] != 0), "perf"])
return(
list(
"data" = data,
"theta" = theta,
"rmse_vec" = rmse_vec,
"MAE_vec" = MAE_vec,
"Rsq_vec" = Rsq_vec
)
)
} # Close "No validation"
# Simple data split for validation ----------------------------------
if (validation.method == "simple") {
time_slice <- caret::createTimeSlices(
y = df[, target],
initialWindow = specs[["initialWindow"]] * nrow(df),
horizon = specs[["horizon"]] * nrow(df),
fixedWindow = specs[["fixedWindow"]]
)
# split performance dataframe
folder_train <- df[unlist(time_slice$train),]
folder_test <- df[unlist(time_slice$test),]
# retrieve date information of split
datetime_train_min <- min(folder_train[, date_ID])
datetime_train_max <- max(folder_train[, date_ID])
datetime_test_min <- min(folder_test[, date_ID])
datetime_test_max <- max(folder_test[, date_ID])
# split datetime data frame
folder_train <-
data %>% dplyr::filter(datetime <= datetime_train_max &
datetime >= datetime_train_min) %>%
mutate("base" = "train")
folder_test <-
data %>% dplyr::filter(datetime <= datetime_test_max &
datetime >= datetime_test_min)  %>%
mutate("base" = "test")
folder_test <- rbind(folder_train, folder_test)
# Model training
if (is.null(specify) == FALSE) {
res_optim <-
optimx::optimx(
par = specify[["theta_init"]],
fn = RSS,
data = folder_train,
target = target,
vars = vars,
method = specify[["optim.method"]],
lower = specify[["lower"]],
upper = specify[["upper"]]
)
} else {
res_optim <-
optimx::optimx(
par = theta_init,
fn = RSS,
data = folder_train,
target = target,
vars = vars,
method = "nlm",
lower = c(P0_init - 0.10 * P0_init, 0, 0, 10, 1, 1),
upper = c(P0_init, 1, 1, 80, 40, 10)
)
}
P0 <- res_optim[[1]]
k1 <- res_optim[[2]]
k3 <- res_optim[[3]]
tau1 <- res_optim[[4]]
tau2 <- res_optim[[5]]
tau3 <- res_optim[[6]]
theta <-
data.frame(
P0 = P0,
k1 = k1,
k3 = k3,
tau1 = tau1,
tau2 = tau2,
tau3 = tau3
)
folder_test$perf <-
real_perf(data = folder_test, target = target)
folder_test$adaptation <-
adaptation_fn(
data = folder_test,
k1 = k1,
tau1 = tau1,
vars = vars
)
folder_test$k2i <-
k2i_fn(
data = folder_test,
k3 = k3,
tau3 = tau3,
vars = vars
)
folder_test$fatigue <-
fatigue_fn(
data = folder_test,
k3 = k3,
tau3 = tau3,
tau2 = tau2,
vars = vars
)
folder_test$predicted <-
perf_model(
data = folder_test,
P0 = P0,
k1 = k1,
k3 = k3,
tau1 = tau1,
tau2 = tau2,
tau3 = tau3,
vars = vars,
target = target
)
# Compute RMSE, MAE and Rsquared on test data
rmse_vec <- caret::RMSE(pred = folder_test[, "predicted"],
obs = folder_test[, "perf"])
MAE_vec <- caret::MAE(pred = folder_test[, "predicted"],
obs = folder_test[, "perf"])
Rsq_vec <- caret::R2(pred = folder_test[, "predicted"],
obs = folder_test[, "perf"])
return(
list(
"data" = folder_test,
"theta" = theta,
"rmse_vec" = rmse_vec,
"MAE_vec" = MAE_vec,
"Rsq_vec" = Rsq_vec
)
)
} # Close "simple"
# TS-CV -------------------------------------------------------------------
# Times Series Cross Validation
if (validation.method == "TS-CV") {
time_slice <- caret::createTimeSlices(
df[, target],
initialWindow = specs[["initialWindow"]],
horizon = specs[["horizon"]],
fixedWindow = specs[["fixedWindow"]]
)
for (k in 1:length(time_slice$train)) {
# Compute the model for each folder. The last folder will return the full model
# split performance dataframe
folder_train <- df[unlist(time_slice$train[k]),]
folder_test <- df[unlist(time_slice$test[k]),]
# retrieve date information of split
datetime_train_min <- min(folder_train[, date_ID])
datetime_train_max <- max(folder_train[, date_ID])
datetime_test_min <- min(folder_test[, date_ID])
datetime_test_max <- max(folder_test[, date_ID])
# split datetime dataframe
folder_train <-
data %>% dplyr::filter(datetime <= datetime_train_max &
datetime >= datetime_train_min) %>%
mutate("base" = "train")
folder_test <-
data %>% dplyr::filter(datetime <= datetime_test_max &
datetime >= datetime_test_min)  %>%
mutate("base" = "test")
folder_test <- rbind(folder_train, folder_test)
# Model training
if (is.null(specify) == FALSE) {
res_optim <-
optimx::optimx(
par = specify[["theta_init"]],
fn = RSS,
data = folder_train,
target = target,
vars = vars,
method = specify[["optim.method"]],
lower = specify[["lower"]],
upper = specify[["upper"]]
)
} else {
res_optim <-
optimx::optimx(
par = theta_init,
fn = RSS,
data = folder_train,
target = target,
vars = vars,
method = "nlm",
lower = c(P0_init - 0.10 * P0_init, 0, 0, 10, 1, 1),
upper = c(P0_init, 1, 1, 80, 40, 10)
)
}
P0 <- res_optim[[1]]
k1 <- res_optim[[2]]
k3 <- res_optim[[3]]
tau1 <- res_optim[[4]]
tau2 <- res_optim[[5]]
tau3 <- res_optim[[6]]
theta <-
data.frame(
P0 = P0,
k1 = k1,
k3 = k3,
tau1 = tau1,
tau2 = tau2,
tau3 = tau3
)
folder_test$perf <-
real_perf(data = folder_test, target = target)
folder_test$adaptation <-
adaptation_fn(
data = folder_test,
k1 = k1,
tau1 = tau1,
vars = vars
)
folder_test$k2i <-
k2i_fn(
data = folder_test,
k3 = k3,
tau3 = tau3,
vars = vars
)
folder_test$fatigue <-
fatigue_fn(
data = folder_test,
k3 = k3,
tau3 = tau3,
tau2 = tau2,
vars = vars
)
folder_test$predicted <-
perf_model(
data = folder_test,
P0 = P0,
k1 = k1,
k3 = k3,
tau1 = tau1,
tau2 = tau2,
tau3 = tau3,
vars = vars,
target = target
)
folder_test$folder <- rep(k, nrow(folder_test))
dfs <- rbind(dfs, folder_test)
theta_df <- rbind(theta_df, theta)
# Compute RMSE, MAE and Rsquared on test data
rmse_vec <-
c(rmse_vec,
caret::RMSE(pred = folder_test[which(folder_test[, "base"] == "test"), "predicted"],
obs = folder_test[which(folder_test[, "base"] == "test"), "perf"]))
MAE_vec <-
c(MAE_vec,
caret::MAE(pred = folder_test[which(folder_test[, "base"] == "test"), "predicted"],
obs = folder_test[which(folder_test[, "base"] == "test"), "perf"]))
Rsq_vec <-
c(Rsq_vec,
caret::R2(pred = folder_test[which(folder_test[, "base"] == "test"), "predicted"],
obs = folder_test[which(folder_test[, "base"] == "test"), "perf"]))
} # Close TS-CV
return(
list(
"dfs" = dfs,
"theta" = theta_df,
"rmse_vec" = rmse_vec,
"MAE_vec" = MAE_vec,
"Rsq_vec" = Rsq_vec
)
)
}
}
model_results <- sysmod(data = example_data,
vars = list("input" = example_data$training_load, "time" = example_data$rest),
target = "perf", date_ID = "datetime",
specify = list("theta_init" = theta_init, "lower" = lower, "upper" = upper, "optim.method" = "nlm"),    # FIX THIS STOP
validation.method = "simple",
specs = list("initialWindow" = 0.8, "horizon" = 0.2, "fixedWindow" = FALSE))
devtools::document()
library(sysmod)
devtools
devtools::document()
library(sysmod)
library(usethis)
library(devtools)
library(roxygen2)
library(sysmod)
load("./data/example_data.rda")
P0_init = init_perf(data = example_data, target = all_of("perf"))
P0_init
theta_init <- c(P0_init = P0_init, k1_init = 0.5, k3_init = 0.1, tau1_init = 40, tau2_init = 20, tau3_init = 5)
lower <- c(P0_init - 0.10 * P0_init, 0, 0, 10, 1, 1)
upper <- c(P0_init, 1, 1, 80, 40, 10)
theta_init
lower
model_results <- sysmod(data = example_data,
vars = list("input" = example_data$training_load, "time" = example_data$rest),
target = "perf", date_ID = "datetime",
specify = list("theta_init" = theta_init, "lower" = lower, "upper" = upper, "optim.method" = "nlm"),    # FIX THIS STOP
validation.method = "simple",
specs = list("initialWindow" = 0.8, "horizon" = 0.2, "fixedWindow" = FALSE))
vars
vars = list("input" = example_data$training_load, "time" = example_data$rest)
target = "perf", date_ID = "datetime"
target = "perf"
date_ID = "datetime"
specify = list("theta_init" = theta_init, "lower" = lower, "upper" = upper, "optim.method" = "nlm")
validation.method = "simple"
specs = list("initialWindow" = 0.8, "horizon" = 0.2, "fixedWindow" = FALSE)
# Verify arguments
if (names(vars[1]) != "input" | names(vars[2]) != "time") {
stop("vars has to be a list that contains `ìnput` and `time` numerical objects ")
}
if (is.character(target) == FALSE) {
stop("`target` has to be a character")
}
if (is.character(date_ID) == FALSE) {
stop("`date_ID` has to be a character")
}
if (validation.method != "none" & validation.method != "simple" & validation.method != "TS-CV") {
stop("validation.method is mis-specified")
}
if (names(specify[1]) != "theta_init" | names(specify[2]) != "lower" | names(specify[3]) != "upper" | names(specify[4]) != "optim.method"){
stop("specify should be a list that contain `theta_init`, `lower`, `ùpper`, `optim.method` named objects")
}
if (names(specs[1]) != "initialWindow" | names(specs[2]) != "horizon" | names(specs[3]) != "fixedWindow") {
stop("specs should be a list that contain `ìnitialWindow`, `horizon` and `fixedWindow` objects")
}
if(is.na(which(data[, target] == 0)[1]) == FALSE) {
df <-
data %>% dplyr::slice(-c(which(data[, target] == 0)))   # A reduced data frame that allow to model with no performance days. Used for datetime indexed data frames in Time series CV
} else {
df <- data
}
data
data <- example_data
if(is.na(which(data[, target] == 0)[1]) == FALSE) {
df <-
data %>% dplyr::slice(-c(which(data[, target] == 0)))   # A reduced data frame that allow to model with no performance days. Used for datetime indexed data frames in Time series CV
} else {
df <- data
}
# Initiate and optimize parameters
if (is.null(specify) == FALSE) {
theta_init <- specify[["theta_init"]]
} else {
P0_init <- init_perf(data, target)
k1_init <- 0.5
k3_init <- 0.1
tau1_init <- 40
tau2_init <- 20
tau3_init <- 5
theta_init <-
c(P0_init, k1_init, k3_init, tau1_init, tau2_init, tau3_init)
}
# Initiate empty objects for further saves
theta_df <- data.frame()   # To save each optim
dfs <- data.frame()
rmse_vec <- c()
MAE_vec <- c()
Rsq_vec <- c()
if (validation.method == "none") {
if (is.null(specify) == FALSE) {
res_optim <-
optimx::optimx(
par = specify[["theta_init"]],
fn = RSS,
data = data,
target = target,
vars = vars,
method = specify[["optim.method"]],
lower = specify[["lower"]],
upper = specify[["upper"]]
)
} else {
res_optim <-
optimx::optimx(
par = theta_init,
fn = RSS,
data = data,
target = target,
vars = vars,
method = "nlm",
lower = c(P0_init - 0.10 * P0_init, 0, 0, 10, 1, 1),
upper = c(P0_init, 1, 1, 80, 40, 10)
)
}
P0 <- res_optim[[1]]
k1 <- res_optim[[2]]
k3 <- res_optim[[3]]
tau1 <- res_optim[[4]]
tau2 <- res_optim[[5]]
tau3 <- res_optim[[6]]
theta <- c(
P0 = P0,
k1 = k1,
k3 = k3,
tau1 = tau1,
tau2 = tau2,
tau3 = tau3
)
data$perf <- real_perf(data = data, target = target)
data$adaptation <-
adaptation_fn(
data = data,
k1 = k1,
tau1 = tau1,
vars = vars
)
data$k2i <- k2i_fn(
data = data,
k3 = k3,
tau3 = tau3,
vars = vars
)
data$fatigue <-
fatigue_fn(
data = data,
k3 = k3,
tau3 = tau3,
tau2 = tau2,
vars = vars
)
data$predicted <-
perf_model(
data = data,
P0 = P0,
k1 = k1,
k3 = k3,
tau1 = tau1,
tau2 = tau2,
tau3 = tau3,
vars = vars,
target = target
)
# Compute RMSE, MAE and Rsquared on test data
rmse_vec <-
caret::RMSE(pred = data[which(data[, target] != 0), "predicted"],
obs = data[which(data[, target] != 0), "perf"])
MAE_vec <-
caret::MAE(pred = data[which(data[, target] != 0), "predicted"],
obs = data[which(data[, target] != 0), "perf"])
Rsq_vec <-
caret::R2(pred = data[which(data[, target] != 0), "predicted"],
obs = data[which(data[, target] != 0), "perf"])
return(
list(
"data" = data,
"theta" = theta,
"rmse_vec" = rmse_vec,
"MAE_vec" = MAE_vec,
"Rsq_vec" = Rsq_vec
)
)
} # Close "No validation"
time_slice <- caret::createTimeSlices(
y = pull(df[, target]),
initialWindow = round(specs[["initialWindow"]] * nrow(df)),
horizon = round(specs[["horizon"]] * nrow(df)),
fixedWindow = specs[["fixedWindow"]]
)
df
df[, target]
rm(list = ls())
library(usethis)
library(devtools)
library(roxygen2)
pacman::p_load(tidyverse, optimx, caret, lubridate)
load("./data/example_data.rda")
P0_init = init_perf(data = example_data, target = all_of("perf"))
source('~/Desktop/Thèse/packages/sysmod/R/functions.R')
P0_init = init_perf(data = example_data, target = all_of("perf"))
theta_init <- c(P0_init = P0_init, k1_init = 0.5, k3_init = 0.1, tau1_init = 40, tau2_init = 20, tau3_init = 5)
lower <- c(P0_init - 0.10 * P0_init, 0, 0, 10, 1, 1)
upper <- c(P0_init, 1, 1, 80, 40, 10)
model_results <- sysmod(data = example_data,
vars = list("input" = example_data$training_load, "time" = example_data$rest),
target = "perf", date_ID = "datetime",
specify = list("theta_init" = theta_init, "lower" = lower, "upper" = upper, "optim.method" = "nlm"),    # FIX THIS STOP
validation.method = "simple",
specs = list("initialWindow" = 0.8, "horizon" = 0.2, "fixedWindow" = FALSE))
str(example_data)
example_data <- example_data %>% as.tibble()
str(example_data)
model_results <- sysmod(data = example_data,
vars = list("input" = example_data$training_load, "time" = example_data$rest),
target = "perf", date_ID = "datetime",
specify = list("theta_init" = theta_init, "lower" = lower, "upper" = upper, "optim.method" = "nlm"),    # FIX THIS STOP
validation.method = "simple",
specs = list("initialWindow" = 0.8, "horizon" = 0.2, "fixedWindow" = FALSE))
View(example_data)
source('~/Desktop/Thèse/packages/sysmod/R/functions.R')
source('~/Desktop/Thèse/packages/sysmod/R/functions.R')
