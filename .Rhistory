theta_init <- specify[["theta_init"]]
} else {
P0_init <- init_perf(data, target)
k1_init <- 0.5
k3_init <- 0.1
tau1_init <- 40
tau2_init <- 20
tau3_init <- 5
theta_init <-
c(P0_init, k1_init, k3_init, tau1_init, tau2_init, tau3_init)
}
# Initiate empty objects for further saves
theta_df <- data.frame()   # To save each optim
dfs <- data.frame()
rmse_vec <- c()
MAE_vec <- c()
Rsq_vec <- c()
if (validation.method == "none") {
if (is.null(specify) == FALSE) {
res_optim <-
optimx::optimx(
par = specify[["theta_init"]],
fn = RSS,
data = data,
target = target,
vars = vars,
method = specify[["optim.method"]],
lower = specify[["lower"]],
upper = specify[["upper"]]
)
} else {
res_optim <-
optimx::optimx(
par = theta_init,
fn = RSS,
data = data,
target = target,
vars = vars,
method = "nlm",
lower = c(P0_init - 0.10 * P0_init, 0, 0, 10, 1, 1),
upper = c(P0_init, 1, 1, 80, 40, 10)
)
}
P0 <- res_optim[[1]]
k1 <- res_optim[[2]]
k3 <- res_optim[[3]]
tau1 <- res_optim[[4]]
tau2 <- res_optim[[5]]
tau3 <- res_optim[[6]]
theta <- c(
P0 = P0,
k1 = k1,
k3 = k3,
tau1 = tau1,
tau2 = tau2,
tau3 = tau3
)
data$perf <- real_perf(data = data, target = target)
data$adaptation <-
adaptation_fn(
data = data,
k1 = k1,
tau1 = tau1,
vars = vars
)
data$k2i <- k2i_fn(
data = data,
k3 = k3,
tau3 = tau3,
vars = vars
)
data$fatigue <-
fatigue_fn(
data = data,
k3 = k3,
tau3 = tau3,
tau2 = tau2,
vars = vars
)
data$predicted <-
perf_model(
data = data,
P0 = P0,
k1 = k1,
k3 = k3,
tau1 = tau1,
tau2 = tau2,
tau3 = tau3,
vars = vars,
target = target
)
# Compute RMSE, MAE and Rsquared on test data
rmse_vec <-
caret::RMSE(pred = data[which(data[, target] != 0), "predicted"],
obs = data[which(data[, target] != 0), "perf"])
MAE_vec <-
caret::MAE(pred = data[which(data[, target] != 0), "predicted"],
obs = data[which(data[, target] != 0), "perf"])
Rsq_vec <-
caret::R2(pred = data[which(data[, target] != 0), "predicted"],
obs = data[which(data[, target] != 0), "perf"])
return(
list(
"data" = data,
"theta" = theta,
"rmse_vec" = rmse_vec,
"MAE_vec" = MAE_vec,
"Rsq_vec" = Rsq_vec
)
)
} # Close "No validation"
time_slice <- caret::createTimeSlices(
y = pull(df[, target]),
initialWindow = round(specs[["initialWindow"]] * nrow(df)),
horizon = round(specs[["horizon"]] * nrow(df)),
fixedWindow = specs[["fixedWindow"]]
)
df
df[, target]
rm(list = ls())
library(usethis)
library(devtools)
library(roxygen2)
pacman::p_load(tidyverse, optimx, caret, lubridate)
load("./data/example_data.rda")
P0_init = init_perf(data = example_data, target = all_of("perf"))
source('~/Desktop/Thèse/packages/sysmod/R/functions.R')
P0_init = init_perf(data = example_data, target = all_of("perf"))
theta_init <- c(P0_init = P0_init, k1_init = 0.5, k3_init = 0.1, tau1_init = 40, tau2_init = 20, tau3_init = 5)
lower <- c(P0_init - 0.10 * P0_init, 0, 0, 10, 1, 1)
upper <- c(P0_init, 1, 1, 80, 40, 10)
model_results <- sysmod(data = example_data,
vars = list("input" = example_data$training_load, "time" = example_data$rest),
target = "perf", date_ID = "datetime",
specify = list("theta_init" = theta_init, "lower" = lower, "upper" = upper, "optim.method" = "nlm"),    # FIX THIS STOP
validation.method = "simple",
specs = list("initialWindow" = 0.8, "horizon" = 0.2, "fixedWindow" = FALSE))
str(example_data)
example_data <- example_data %>% as.tibble()
str(example_data)
model_results <- sysmod(data = example_data,
vars = list("input" = example_data$training_load, "time" = example_data$rest),
target = "perf", date_ID = "datetime",
specify = list("theta_init" = theta_init, "lower" = lower, "upper" = upper, "optim.method" = "nlm"),    # FIX THIS STOP
validation.method = "simple",
specs = list("initialWindow" = 0.8, "horizon" = 0.2, "fixedWindow" = FALSE))
View(example_data)
source('~/Desktop/Thèse/packages/sysmod/R/functions.R')
source('~/Desktop/Thèse/packages/sysmod/R/functions.R')
devtools::document()
library(sysmod)
devtools::document()
library(sysmod)
library(sysmod)
source('~/Desktop/Thèse/packages/sysmod/R/functions.R')
load("./data/example_data.rda")
init_perf(data = example_data, target = "perf")
library(tidyverse)
init_perf(data = example_data, target = "perf")
all_of(target)
#' @param data A data frame object that contains at least training loads, performances and time between two consecutive sessions.
#' @param target A character that indicates the performances column name.
#'
#' @return a numerical value
#'
#' @examples
#'init_perf(data = example_data, target = "perf")
#'
#'@author Frank Imbach <frankimbach@gmail.com>
#'@export
init_perf <- function(data, target){
return(data %>% dplyr::filter(all_of(target) != 0) %>%
data.table::first() %>%
dplyr::select(all_of(target)) %>%
as.numeric())
}
init_perf(data = example_data, target = "perf")
source('~/Desktop/Thèse/packages/sysmod/R/functions.R')
init_perf(data = example_data, target = "perf")
devtools::document()
library(sysmod)
library(sysmod)
pacman::p_load(tidyverse, optimx, caret, lubridate)
example_data <- data.frame("training_load" = c(rnorm(100, mean = 1000, sd = 150),
rep(0,50)),
"rest" = c(rnorm(100, mean= 2, sd=1),
rep(1,50)),
"perf" = c(seq(from = 10, to = 30, length.out = 100),
rep(0,50)),
"datetime" = seq(ISOdate(2020, 1, 1), by = "day", length.out = 150))
data <- example_data
target <- "perf"
vars <- list("input" = example_data$training_load, "time" = example_data$rest)
k1 = 0.1
k3 = 0.01
tau1 = 40
tau2 = 20
tau3 = 5
adaptation_fn <- function(data, k1, tau1, vars){
adapt_val <- vector(length=nrow(data))
# Make the function return aberration if the time constant takes a negative or 0 value
if (is.na(tau1)) adapt_val <- rep(-9000, nrow(data))
else if(tau1 == 0) adapt_val <- rep(-9000, nrow(data))
else {
adapt_val[1] <- 0
for(i in 2:nrow(data)){
adapt_val[i] <- (k1*vars[["input"]][i-1] + adapt_val[i-1])*exp(-vars[["time"]][i]/(tau1))
}
}
return(adapt_val)
}
adaptations <- adaptation_fn(data = example_data, k1 = 0.5, tau1 = 40, vars = list("input" = example_data$training_load, "time" = example_data$rest))
plot(adaptations)
k2i_fn <- function(data, k3, tau3, vars){
k2i_val <- vector(length=nrow(data))
if (is.na(tau3)) k2i_val <- rep(-9000, nrow(data))
else if(tau3==0) k2i_val <- rep(-9000, nrow(data))
else {
k2i_val[1] <- 0
for(i in 2:nrow(data)){
k2i_val[i] <- (k3*vars[["input"]][i-1] + k2i_val[i-1])*exp(-vars[["time"]][i]/(tau3))
}
}
return(k2i_val)
}
fatigue_fn <- function(data, k3, tau2, tau3, vars){
fat <- vector(length=nrow(data))
if (is.na(tau3) | is.na(tau2)) apt <- rep(-9000, nrow(data))
else if (tau3==0 | tau2==0) fatigue <- rep(-9000, nrow(data))
else {
fat[1] <- 0
k2i <- k2i_fn(data, k3, tau3, vars)
for(i in 2:nrow(data)){
fat[i] <- (k2i[i-1]*vars[["input"]][i-1]+fat[i-1])*exp(-vars[["time"]][i]/(tau2))
}
}
return(fat)
}
fatigue <- fatigue_fn(data = example_data, k3 = 0.1, tau2 = 10, tau3 = 5, vars = list("input" = example_data$training_load, "time" = example_data$rest))
plot(fatigue)
init_perf <- function(data, target){
return(data %>% dplyr::filter(target != 0) %>%
data.table::first() %>%
dplyr::select(target) %>%
as.numeric())
}
real_perf <- function(data, target){
res <- NULL
res <- data[,target]
res[is.na(res)] <- 0
return(res)
}
perf_model <- function(data, P0, k1, k3, tau1, tau2, tau3, vars, target){
apt <- adaptation_fn(data, k1, tau1, vars)
fat <- fatigue_fn(data, k3, tau3, tau2, vars)
res <- vector(length = length(fat))
P0 <- P0
obs <- real_perf(data, target)
for(i in 1:length(fat)){
ifelse(obs[i] != 0,
res[i] <- P0 + apt[i] - fat[i],
res[i] <- 0)
}
return(res)
}
RSS <- function(theta, data, target, vars){
y <- real_perf(data, target)
y_hat <- perf_model(data, P0=theta[1], k1=theta[2], k3=theta[3], tau1=theta[4], tau2=theta[5], tau3=theta[6], vars, target)
diff <- rep(0, length=length(y))
for(i in 1:length(y)){
if(y[i]!=0){
diff[i] <- y[i]-y_hat[i]
}
}
rss <- sum((diff)^2)
return(rss)
}
P0_init <- init_perf(data = data, target = target)
theta_init <- c(P0_init = init_perf(data = example_data, target = "perf"), k1_init = 0.5, k3_init = 0.1, tau1_init = 40, tau2_init = 20, tau3_init = 5)
lower <- c(P0_init - 0.10 * P0_init, 0, 0, 10, 1, 1)
upper <- c(P0_init, 1, 1, 80, 40, 10)
init_perf
init_perf <- function(data, target){
return(data %>% dplyr::filter(all_of(target) != 0) %>%
data.table::first() %>%
dplyr::select(all_of(target)) %>%
as.numeric())
}
RSS <- function(theta, data, target, vars){
y <- real_perf(data, target)
y_hat <- perf_model(data, P0=theta[1], k1=theta[2], k3=theta[3], tau1=theta[4], tau2=theta[5], tau3=theta[6], vars, target)
diff <- rep(0, length=length(y))
for(i in 1:length(y)){
if(y[i]!=0){
diff[i] <- y[i]-y_hat[i]
}
}
rss <- sum((diff)^2)
return(rss)
}
P0_init <- init_perf(data = data, target = target)
theta_init <- c(P0_init = init_perf(data = example_data, target = "perf"), k1_init = 0.5, k3_init = 0.1, tau1_init = 40, tau2_init = 20, tau3_init = 5)
lower <- c(P0_init - 0.10 * P0_init, 0, 0, 10, 1, 1)
upper <- c(P0_init, 1, 1, 80, 40, 10)
model_results <- sysmod(data = example_data,
vars = list("input" = example_data$training_load, "time" = example_data$rest),
target = "perf", date_ID = "datetime",
specify = list("theta_init" = theta_init, "lower" = lower, "upper" = upper, "optim.method" = "nlm"),
validation.method = "simple",
specs = list("initialWindow" = 0.8, "horizon" = 0.2, "fixedWindow" = FALSE))
res <- data.frame("RMSE" = model_results[["rmse_vec"]],
"MAE" = model_results[["MAE_vec"]],
"Rsquared" = model_results[["Rsq_vec"]])
knitr::kable(x = res, format = "simple", digits = 3)
model_results$data
ggplot(data=model_results$data, mapping = aes(x = datetime, y = perf) +
geom_point() +
geom_line(aes(x = datetime, y = predicted), col = "red"))
ggplot(data=model_results$data, mapping = aes(x = datetime, y = perf) +
geom_point() +
geom_line(mapping = aes(x = datetime, y = predicted), col = "red"))
ggplot(data=model_results$data, mapping = aes(x = datetime, y = perf) +
geom_point() +
geom_line(data=model_results$data, mapping = aes(x = datetime, y = predicted), col = "red"))
ggplot(data=model_results$data, mapping = aes(x = datetime, y = perf) +
geom_point())
ggplot(data=model_results$data, mapping = aes(x = datetime, y = perf)) +
geom_point() +
geom_line(aes(x = datetime, y = predicted), col = "red")
View(example_data)
dat <- data.frame("training_load" = c(rnorm(100, mean = 1000, sd = 150),
rep(0,50)),
"rest" = c(rnorm(100, mean= 2, sd=1),
rep(1,50)),
"perf" = c(seq(from = 10, to = 30, length.out = 100),
rep(0,50)),
"datetime" = seq(ISOdate(2020, 1, 1), by = "day", length.out = 150))
?rnorm
dat <- data.frame("training_load" = c(rnorm(100, mean = 1000, sd = 150),
rep(0,50)),
"rest" = c(rnorm(100, mean= 2, sd=1),
rep(1,50)),
"perf" = seq(from = 10, to = 30, length.out = 100),
rep(0,50),
"datetime" = seq(ISOdate(2020, 1, 1), by = "day", length.out = 150))
dat <- data.frame("training_load" = c(rnorm(100, mean = 1000, sd = 150),
rep(0,50)),
"rest" = c(rnorm(100, mean= 2, sd=1),
rep(1,50)),
"perf" = c(seq(from = 10, to = 30, length.out = 100),
rep(0,50)) * rnorm(100, 1, 0.1),
"datetime" = seq(ISOdate(2020, 1, 1), by = "day", length.out = 150))
dat <- data.frame("training_load" = c(rnorm(100, mean = 1000, sd = 150),
rep(0,50)),
"rest" = c(rnorm(100, mean= 2, sd=1),
rep(1,50)),
"perf" = c(seq(from = 10, to = 30, length.out = 100),
rep(0,50)) * rnorm(100, 1, 0.1),
"datetime" = seq(ISOdate(2020, 1, 1), by = "day", length.out = 150))
rnorm(100, 1, 0.1)
dat <- data.frame("training_load" = c(rnorm(100, mean = 1000, sd = 150),
rep(0,50)),
"rest" = c(rnorm(100, mean= 2, sd=1),
rep(1,50)),
"perf" = c(seq(from = 10, to = 30, length.out = 100),
rep(0,50)) * rnorm(100, 1, 0.1),
"datetime" = seq(ISOdate(2020, 1, 1), by = "day", length.out = 150))
dat <- data.frame("training_load" = c(rnorm(100, mean = 1000, sd = 150),
rep(0,50)),
"rest" = c(rnorm(100, mean= 2, sd=1),
rep(1,50)),
"perf" = c(seq(from = 10, to = 30, length.out = 100),
rep(0,50)) * rnorm(150, 1, 0.1),
"datetime" = seq(ISOdate(2020, 1, 1), by = "day", length.out = 150))
View(dat)
plot(dat$perf)
dat <- data.frame("training_load" = c(rnorm(100, mean = 1000, sd = 150),
rep(0,50)),
"rest" = c(rnorm(100, mean= 2, sd=1),
rep(1,50)),
"perf" = c(seq(from = 10, to = 30, length.out = 100),
rep(0,50)) * rnorm(150, 1, 0.05),
"datetime" = seq(ISOdate(2020, 1, 1), by = "day", length.out = 150))
plot(dat$perf)
library(sysmod)
pacman::p_load(tidyverse, optimx, caret, lubridate)
example_data <- data.frame("training_load" = c(rnorm(100, mean = 1000, sd = 150),
rep(0,50)),
"rest" = c(rnorm(100, mean= 2, sd=1),
rep(1,50)),
"perf" = c(seq(from = 10, to = 30, length.out = 100),
rep(0,50)) * rnorm(150, 1, 0.05),
"datetime" = seq(ISOdate(2020, 1, 1), by = "day", length.out = 150))
data <- example_data
target <- "perf"
vars <- list("input" = example_data$training_load, "time" = example_data$rest)
k1 = 0.1
k3 = 0.01
tau1 = 40
tau2 = 20
tau3 = 5
adaptation_fn <- function(data, k1, tau1, vars){
adapt_val <- vector(length=nrow(data))
# Make the function return aberration if the time constant takes a negative or 0 value
if (is.na(tau1)) adapt_val <- rep(-9000, nrow(data))
else if(tau1 == 0) adapt_val <- rep(-9000, nrow(data))
else {
adapt_val[1] <- 0
for(i in 2:nrow(data)){
adapt_val[i] <- (k1*vars[["input"]][i-1] + adapt_val[i-1])*exp(-vars[["time"]][i]/(tau1))
}
}
return(adapt_val)
}
adaptations <- adaptation_fn(data = example_data, k1 = 0.5, tau1 = 40, vars = list("input" = example_data$training_load, "time" = example_data$rest))
plot(adaptations)
fatigue_fn <- function(data, k3, tau2, tau3, vars){
fat <- vector(length=nrow(data))
if (is.na(tau3) | is.na(tau2)) apt <- rep(-9000, nrow(data))
else if (tau3==0 | tau2==0) fatigue <- rep(-9000, nrow(data))
else {
fat[1] <- 0
k2i <- k2i_fn(data, k3, tau3, vars)
for(i in 2:nrow(data)){
fat[i] <- (k2i[i-1]*vars[["input"]][i-1]+fat[i-1])*exp(-vars[["time"]][i]/(tau2))
}
}
return(fat)
}
fatigue <- fatigue_fn(data = example_data, k3 = 0.1, tau2 = 10, tau3 = 5, vars = list("input" = example_data$training_load, "time" = example_data$rest))
plot(fatigue)
fatigue_fn <- function(data, k3, tau2, tau3, vars){
fat <- vector(length=nrow(data))
if (is.na(tau3) | is.na(tau2)) apt <- rep(-9000, nrow(data))
else if (tau3==0 | tau2==0) fatigue <- rep(-9000, nrow(data))
else {
fat[1] <- 0
k2i <- k2i_fn(data, k3, tau3, vars)
for(i in 2:nrow(data)){
fat[i] <- (k2i[i-1]*vars[["input"]][i-1]+fat[i-1])*exp(-vars[["time"]][i]/(tau2))
}
}
return(fat)
}
fatigue <- fatigue_fn(data = example_data, k3 = 0.1, tau2 = 10, tau3 = 5, vars = list("input" = example_data$training_load, "time" = example_data$rest))
plot(fatigue)
k2i_fn <- function(data, k3, tau3, vars){
k2i_val <- vector(length=nrow(data))
if (is.na(tau3)) k2i_val <- rep(-9000, nrow(data))
else if(tau3==0) k2i_val <- rep(-9000, nrow(data))
else {
k2i_val[1] <- 0
for(i in 2:nrow(data)){
k2i_val[i] <- (k3*vars[["input"]][i-1] + k2i_val[i-1])*exp(-vars[["time"]][i]/(tau3))
}
}
return(k2i_val)
}
init_perf <- function(data, target){
return(data %>% dplyr::filter(all_of(target) != 0) %>%
data.table::first() %>%
dplyr::select(all_of(target)) %>%
as.numeric())
}
real_perf <- function(data, target){
res <- NULL
res <- data[,target]
res[is.na(res)] <- 0
return(res)
}
perf_model <- function(data, P0, k1, k3, tau1, tau2, tau3, vars, target){
apt <- adaptation_fn(data, k1, tau1, vars)
fat <- fatigue_fn(data, k3, tau3, tau2, vars)
res <- vector(length = length(fat))
P0 <- P0
obs <- real_perf(data, target)
for(i in 1:length(fat)){
ifelse(obs[i] != 0,
res[i] <- P0 + apt[i] - fat[i],
res[i] <- 0)
}
return(res)
}
RSS <- function(theta, data, target, vars){
y <- real_perf(data, target)
y_hat <- perf_model(data, P0=theta[1], k1=theta[2], k3=theta[3], tau1=theta[4], tau2=theta[5], tau3=theta[6], vars, target)
diff <- rep(0, length=length(y))
for(i in 1:length(y)){
if(y[i]!=0){
diff[i] <- y[i]-y_hat[i]
}
}
rss <- sum((diff)^2)
return(rss)
}
P0_init <- init_perf(data = data, target = target)
theta_init <- c(P0_init = init_perf(data = example_data, target = "perf"), k1_init = 0.5, k3_init = 0.1, tau1_init = 40, tau2_init = 20, tau3_init = 5)
lower <- c(P0_init - 0.10 * P0_init, 0, 0, 10, 1, 1)
upper <- c(P0_init, 1, 1, 80, 40, 10)
model_results <- sysmod(data = example_data,
vars = list("input" = example_data$training_load, "time" = example_data$rest),
target = "perf", date_ID = "datetime",
specify = list("theta_init" = theta_init, "lower" = lower, "upper" = upper, "optim.method" = "nlm"),
validation.method = "simple",
specs = list("initialWindow" = 0.8, "horizon" = 0.2, "fixedWindow" = FALSE))
res <- data.frame("RMSE" = model_results[["rmse_vec"]],
"MAE" = model_results[["MAE_vec"]],
"Rsquared" = model_results[["Rsq_vec"]])
knitr::kable(x = res, format = "simple", digits = 3)
ggplot(data=model_results$data, mapping = aes(x = datetime, y = perf)) +
geom_point() +
geom_line(aes(x = datetime, y = predicted), col = "red")
