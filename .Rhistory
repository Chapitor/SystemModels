View(model_results[["data"]])
ggplot(data=model_results$data, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
geom_line(aes(x = datetime, y = predicted), col = "red")+
theme_classic()
ggplot(data=model_results$data, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
braks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted), col = "red")+
theme_classic()
ggplot(data=model_results$data, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted), col = "red")+
theme_classic()
ggplot(data=model_results$data, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, colour = "model"), col = "red")+
theme_classic()
ggplot(data=model_results$data, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, fill = predicted), col = "red")+
theme_classic()
df_to_plot <- model_results$data %>%
mutate("model" = "model")
ggplot(data=df_to_plot, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, colour = model), col = "red")+
theme_classic()
ggplot(data=df_to_plot, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, colour = model), col = "red")+
scale_colour_discrete("name" = "test")+
theme_classic()
ggplot(data=df_to_plot, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, fill = model), col = "red")+
theme_classic()
ggplot(data=df_to_plot, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, shape = model), col = "red")+
theme_classic()
ggplot(data=df_to_plot, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, shape = as.factor(model)), col = "red")+
theme_classic()
ggplot(data=df_to_plot, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, linetype = as.factor(model)), col = "red")+
theme_classic()
ggplot(data=df_to_plot, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, linetype = as.factor(model)), col = "red")+
scale_linetype_discrete(name = "")+
theme_classic()
ggplot(data=df_to_plot, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, linetype = as.factor(model)), col = "red")+
scale_linetype_discrete(name = "")+
xlab(label = "date")+
ylab(label = "performance")+
theme_classic()
model_results_TSCV <- sysmod(data = example_data,
vars = list("input" = example_data$training_load, "time" = example_data$rest),
target = "perf", date_ID = "datetime",
specify = list("theta_init" = theta_init, "lower" = lower, "upper" = upper, "optim.method" = "nlm"),
validation.method = "TS-CV",
specs = list("initialWindow" = 50, "horizon" = 15, "fixedWindow" = FALSE))
View(model_results_TSCV)
View(model_results_TSCV[["dfs"]])
model_results_TSCV[["rmse_vec"]]
df_boxplot <- model_results_TSCV$dfs %>%
mutate("rmse" = caret::RMSE(pred = predicted, obs = perf, na.rm = T))
df_boxplot
rmse_vec <- apply(model_results_TSCV$dfs, 1, caret::RMSE(pred = predicted, obs = perf, na.rm = T))
rmse_vec <- apply(model_results_TSCV$dfs[,c("predicted", "perf")], 1, caret::RMSE(pred = predicted, obs = perf, na.rm = T))
rmse_vec <- apply(model_results_TSCV$dfs[,c("predicted", "perf")], 1, caret::RMSE(pred = model_results_TSCV$dfs[,"predicted"], obs = model_results_TSCV$dfs[,"perf"], na.rm = T))
rmse_vec <- apply(model_results_TSCV$dfs[,c("predicted", "perf")], 1, caret::RMSE(pred = model_results_TSCV$dfs[,"predicted"], obs = model_results_TSCV$dfs[,"perf"], na.rm = T))
model_results_TSCV$dfs[,c("predicted", "perf")]
rmse_vec <- apply(model_results_TSCV$dfs[,c("predicted", "perf")], 1, caret::RMSE(na.rm = T))
rmse_vec <- apply(model_results_TSCV$dfs[,c("predicted", "perf")], 1, caret::RMSE(pred = x[predicted], obs = x[perf]))
rmse_vec <- apply(model_results_TSCV$dfs[,c("predicted", "perf")], MARGIN = MARGIN, caret::RMSE(pred = x[predicted], obs = x[perf]))
rmse_vec <- apply(model_results_TSCV$dfs[,c("predicted", "perf")], MARGIN = c(1,2), caret::RMSE(pred = x[predicted], obs = x[perf]))
rmse_vec <- apply(model_results_TSCV$dfs[,c("predicted", "perf")], 1, caret::RMSE())
rmse_vec <- c(caret::RMSE(pred = model_results_TSCV$dfs$predicted, obs = model_results_TSCV$dfs$perf))
rmse_vec
pred = model_results_TSCV$dfs$predicted %>% filter(base = "train")
model_results_TSCV$dfs$predicted %>% filter(base == "train")
caret::RMSE()
caret::RMSE
rmse_vec <- apply(model_results_TSCV$dfs, 1, function(x) sqrt(mean(x["predicted"] - x["perf"])^2))
rmse_vec <- apply(model_results_TSCV$dfs, 1, function(x) mean)
rmse_vec
rmse_vec <- apply(model_results_TSCV$dfs, 1, mean)
rmse_train <- model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf))
rmse_train
rmse_train <- model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf)) %>%
as.vector()
View(rmse_train)
rmse_train <- model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf), .groups = folder) %>%
as.vector()
rmse_train <- model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf), .groups = F) %>%
as.vector()
rmse_train <- model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf)) %>%
dplyr::select(rmse) %>% as.vector()
rmse_train
rmse_train <- model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf)) %>%
dplyr::select(rmse) %>% as.numeric()
rmse_train <- c(rmse_train)
View(rmse_train)
?summarise
rmse_train <- model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf), .group = "drop") %>%
dplyr::select(rmse)
rmse_train
rmse_train <- model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf), .group = "keep") %>%
dplyr::select(rmse)
rmse_train <- c(model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf)) %>%
dplyr::select(rmse))
rmse_train <- c(model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf)) %>%
dplyr::select(rmse)) %>%
unlist()
rmse_train <- c(model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf)) %>%
dplyr::select(rmse)) %>%
unlist() %>% as.numeric()
rmse_train <- c(model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf)) %>%
dplyr::select(rmse)) %>%
as.numeric(unlist())
rmse_train <- c(model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf)) %>%
dplyr::select(rmse)) %>%
unlist() %>% as.numeric()
rmse_train
rmse_test <- c(model_results_TSCV$dfs %>%
filter(base == "test") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf)) %>%
dplyr::select(rmse)) %>%
unlist() %>% as.numeric()
df_boxplot <- data.frame(rmse_train = rmse_train,
rmse_test = rmse_test,
base = rep("train", length(rmse_train),
"test", length(rmse_test)))
df_boxplot
rmse_train
df_boxplot <- data.frame(rmse_tr = rmse_train,
rmse_te = rmse_test,
base = rep("train", length(rmse_train),
"test", length(rmse_test)))
length(rmse_train)
df_boxplot <- data.frame(rmse_train = rmse_train,
rmse_test = rmse_test,
base = c(rep("train", length(rmse_train)),
rep("test", length(rmse_test))))
df_boxplot <- data.frame(rmse_train = rmse_train,
rmse_test = rmse_test,
base = as.factor(c(rep("train", length(rmse_train)),
rep("test", length(rmse_test)))))
?pivot_longer
df_boxplot <- data.frame(rmse_train = rmse_train,
rmse_test = rmse_test,
base = as.factor(c(rep("train", length(rmse_train)),
rep("test", length(rmse_test))))) %>%
pivot_longer(cols = c("rmse_train", "rmse_test"))
View(df_boxplot)
df_boxplot <- data.frame(rmse_train = rmse_train,
rmse_test = rmse_test,
base = as.factor(c(rep("train", length(rmse_train)),
rep("test", length(rmse_test)))))
View(df_boxplot)
df_boxplot <- data.frame(rmse_train = rmse_train,
rmse_test = rmse_test,
pivot_longer(cols = c("rmse_train", "rmse_test"), names_to = "base"))
df_boxplot <- data.frame(rmse_train = rmse_train,
rmse_test = rmse_test),
df_boxplot <- data.frame(rmse_train = rmse_train,
rmse_test = rmse_test) %>%
pivot_longer(cols = c("rmse_train", "rmse_test"), names_to = "base"))
df_boxplot <- data.frame(rmse_train = rmse_train,
rmse_test = rmse_test) %>%
pivot_longer(cols = c("rmse_train", "rmse_test"), names_to = "base")
ggplot(df_boxplot, mapping = aes(x = base, y = value, colour = base)) +
geom_boxplot()
levels(df_boxplot)
levels(df_boxplot$base)
df_boxplot <- data.frame(rmse_train = rmse_train,
rmse_test = rmse_test) %>%
pivot_longer(cols = c("rmse_train", "rmse_test"), names_to = "base") %>%
mutate(base = as.factor(base))
levels(df_boxplot$base)
levels(df_boxplot$base) <- c("rmse_train", "rmse_test")
ggplot(df_boxplot, mapping = aes(x = base, y = value, colour = base)) +
geom_boxplot()
df_boxplot$base <- factor(df_boxplot$base, levels = c("rmse_train", "rmse_test"))
ggplot(df_boxplot, mapping = aes(x = base, y = value, colour = base)) +
geom_boxplot()
df_boxplot %>% summarise(m = mean(value))
df_boxplot %>% group_by(base) %>% summarise(m = mean(value))
rmse_train
mean(rmse_train)
mean(rmse_test)
rmse_test <- c(model_results_TSCV$dfs %>%
filter(base == "test") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf)) %>%
dplyr::select(rmse)) %>%
unlist() %>% as.numeric()
df_boxplot <- data.frame(rmse_train = rmse_train,
rmse_test = rmse_test) %>%
pivot_longer(cols = c("rmse_train", "rmse_test"), names_to = "base") %>%
mutate(base = as.factor(base))
df_boxplot$base <- factor(df_boxplot$base, levels = c("rmse_train", "rmse_test"))
ggplot(df_boxplot, mapping = aes(x = base, y = value, colour = base)) +
geom_boxplot()
ggplot(df_boxplot, mapping = aes(x = base, y = value, colour = base)) +
geom_boxplot() +
scale_colour_discrete(name = "Distributions") +
ylab("RMSE") +
theme_classic()
model_results_TSCV$dfs
mutate("model" = "model")
df_to_plot <- model_results_TSCV$dfs %>% filter(folder = max(folder)) %>%
mutate("model" = "model")
df_to_plot <- model_results_TSCV$dfs %>% filter(folder == max(folder)) %>%
mutate("model" = "model")
ggplot(data=df_to_plot, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, linetype = as.factor(model)), col = "red")+
scale_linetype_discrete(name = "")+
xlab(label = "date")+
ylab(label = "performance")+
theme_classic()
df_to_plot
df_to_plot <- model_results_TSCV$dfs %>% filter(folder == max(folder)) %>%
mutate("model" = "model")
ggplot(data=df_to_plot, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, linetype = as.factor(model)), col = "red")+
scale_linetype_discrete(name = "")+
xlab(label = "date")+
ylab(label = "performance")+
theme_classic()
example_data <- data.frame("training_load" = c(rnorm(100, mean = 1000, sd = 150),
rep(0,50)),
"rest" = c(rnorm(100, mean= 2, sd=1),
rep(1,50)),
"perf" = c(seq(from = 10, to = 30, length.out = 100),
rep(0,50)) * rnorm(150, 1, 0.05),
"datetime" = seq(ISOdate(2020, 1, 1), by = "day", length.out = 150))
library(sysmod)
pacman::p_load(tidyverse, optimx, caret, lubridate)
data <- example_data
target <- "perf"
vars <- list("input" = example_data$training_load, "time" = example_data$rest)
k1 = 0.1
k3 = 0.01
tau1 = 40
tau2 = 20
tau3 = 5
adaptation_fn <- function(data, k1, tau1, vars){
adapt_val <- vector(length=nrow(data))
# Make the function return aberration if the time constant takes a negative or 0 value
if (is.na(tau1)) adapt_val <- rep(-9000, nrow(data))
else if(tau1 == 0) adapt_val <- rep(-9000, nrow(data))
else {
adapt_val[1] <- 0
for(i in 2:nrow(data)){
adapt_val[i] <- (k1*vars[["input"]][i-1] + adapt_val[i-1])*exp(-vars[["time"]][i]/(tau1))
}
}
return(adapt_val)
}
adaptations <- adaptation_fn(data = example_data, k1 = 0.5, tau1 = 40, vars = list("input" = example_data$training_load, "time" = example_data$rest))
plot(adaptations)
k2i_fn <- function(data, k3, tau3, vars){
k2i_val <- vector(length=nrow(data))
if (is.na(tau3)) k2i_val <- rep(-9000, nrow(data))
else if(tau3==0) k2i_val <- rep(-9000, nrow(data))
else {
k2i_val[1] <- 0
for(i in 2:nrow(data)){
k2i_val[i] <- (k3*vars[["input"]][i-1] + k2i_val[i-1])*exp(-vars[["time"]][i]/(tau3))
}
}
return(k2i_val)
}
fatigue_fn <- function(data, k3, tau2, tau3, vars){
fat <- vector(length=nrow(data))
if (is.na(tau3) | is.na(tau2)) apt <- rep(-9000, nrow(data))
else if (tau3==0 | tau2==0) fatigue <- rep(-9000, nrow(data))
else {
fat[1] <- 0
k2i <- k2i_fn(data, k3, tau3, vars)
for(i in 2:nrow(data)){
fat[i] <- (k2i[i-1]*vars[["input"]][i-1]+fat[i-1])*exp(-vars[["time"]][i]/(tau2))
}
}
return(fat)
}
fatigue <- fatigue_fn(data = example_data, k3 = 0.1, tau2 = 10, tau3 = 5, vars = list("input" = example_data$training_load, "time" = example_data$rest))
plot(fatigue)
init_perf <- function(data, target){
return(data %>% dplyr::filter(all_of(target) != 0) %>%
data.table::first() %>%
dplyr::select(all_of(target)) %>%
as.numeric())
}
real_perf <- function(data, target){
res <- NULL
res <- data[,target]
res[is.na(res)] <- 0
return(res)
}
perf_model <- function(data, P0, k1, k3, tau1, tau2, tau3, vars, target){
apt <- adaptation_fn(data, k1, tau1, vars)
fat <- fatigue_fn(data, k3, tau3, tau2, vars)
res <- vector(length = length(fat))
P0 <- P0
obs <- real_perf(data, target)
for(i in 1:length(fat)){
ifelse(obs[i] != 0,
res[i] <- P0 + apt[i] - fat[i],
res[i] <- 0)
}
return(res)
}
RSS <- function(theta, data, target, vars){
y <- real_perf(data, target)
y_hat <- perf_model(data, P0=theta[1], k1=theta[2], k3=theta[3], tau1=theta[4], tau2=theta[5], tau3=theta[6], vars, target)
diff <- rep(0, length=length(y))
for(i in 1:length(y)){
if(y[i]!=0){
diff[i] <- y[i]-y_hat[i]
}
}
rss <- sum((diff)^2)
return(rss)
}
P0_init <- init_perf(data = data, target = target)
theta_init <- c(P0_init = init_perf(data = example_data, target = "perf"), k1_init = 0.5, k3_init = 0.1, tau1_init = 40, tau2_init = 20, tau3_init = 5)
lower <- c(P0_init - 0.10 * P0_init, 0, 0, 10, 1, 1)
upper <- c(P0_init, 1, 1, 80, 40, 10)
model_results <- sysmod(data = example_data,
vars = list("input" = example_data$training_load, "time" = example_data$rest),
target = "perf", date_ID = "datetime",
specify = list("theta_init" = theta_init, "lower" = lower, "upper" = upper, "optim.method" = "nlm"),
validation.method = "simple",
specs = list("initialWindow" = 0.8, "horizon" = 0.2, "fixedWindow" = FALSE))
res <- data.frame("RMSE" = model_results[["rmse_vec"]],
"MAE" = model_results[["MAE_vec"]],
"Rsquared" = model_results[["Rsq_vec"]])
knitr::kable(x = res, format = "simple", digits = 3)
df_to_plot <- model_results$data %>%
mutate("model" = "model")
ggplot(data=df_to_plot, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, linetype = as.factor(model)), col = "red")+
scale_linetype_discrete(name = "")+
xlab(label = "date")+
ylab(label = "performance")+
theme_classic()
model_results_TSCV <- sysmod(data = example_data,
vars = list("input" = example_data$training_load, "time" = example_data$rest),
target = "perf", date_ID = "datetime",
specify = list("theta_init" = theta_init, "lower" = lower, "upper" = upper, "optim.method" = "nlm"),
validation.method = "TS-CV",
specs = list("initialWindow" = 50, "horizon" = 15, "fixedWindow" = FALSE))
res_TSCV <- data.frame("RMSE" = mean(model_results_TSCV[["rmse_vec"]]),
"MAE" = mean(model_results_TSCV[["MAE_vec"]]),
"Rsquared" = mean(model_results_TSCV[["Rsq_vec"]]))
knitr::kable(x = res_TSCV, format = "simple", digits = 3)
rmse_train <- c(model_results_TSCV$dfs %>%
filter(base == "train") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf)) %>%
dplyr::select(rmse)) %>%
unlist() %>% as.numeric()
rmse_test <- c(model_results_TSCV$dfs %>%
filter(base == "test") %>%
group_by(folder) %>%
summarise(rmse = caret::RMSE(pred = predicted, obs= perf)) %>%
dplyr::select(rmse)) %>%
unlist() %>% as.numeric()
df_boxplot <- data.frame(rmse_train = rmse_train,
rmse_test = rmse_test) %>%
pivot_longer(cols = c("rmse_train", "rmse_test"), names_to = "base") %>%
mutate(base = as.factor(base))
df_boxplot$base <- factor(df_boxplot$base, levels = c("rmse_train", "rmse_test"))
ggplot(df_boxplot, mapping = aes(x = base, y = value, colour = base)) +
geom_boxplot() +
scale_colour_discrete(name = "Distributions") +
ylab("RMSE") +
theme_classic()
df_to_plot2 <- model_results_TSCV$dfs %>% filter(folder == max(folder)) %>%
mutate("model" = "model")
ggplot(data=df_to_plot2, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(aes(x = datetime, y = predicted, linetype = as.factor(model)), col = "red")+
scale_linetype_discrete(name = "")+
xlab(label = "date")+
ylab(label = "performance")+
theme_classic()
View(df_to_plot)
View(df_to_plot2)
ggplot(data=df_to_plot2, mapping = aes(x = datetime, y = perf, colour = base)) +
geom_point() +
scale_colour_manual(name = "data",
breaks = c("train", "test"),
values = c("black", "red"))+
geom_line(data=df_to_plot2, aes(x = datetime, y = predicted, linetype = as.factor(model)), col = "red")+
scale_linetype_discrete(name = "")+
xlab(label = "date")+
ylab(label = "performance")+
theme_classic()
devtools::document()
library(sysmod)
?sysmod
library(sysmod)
?sysmod
devtools
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(sysmod)
library(sysmod)
?sysmod
